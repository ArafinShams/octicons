#!/usr/bin/env node
const fse = require('fs-extra')
const octicons = require('..')
const path = require('path')
const permutron = require('permutron')

const getColors = () => {
  const colorVarsPath = require.resolve(
    'primer-support/lib/variables/color-system.scss'
  )

  const parseVariables = scss => {
    const matches = scss.match(/\$([-\w]+:\s*#\w+)/g)
    return Array.from(matches)
      .slice(1)
      .map(pair => {
        if (pair.charAt(0) === '$') {
          pair = pair.substr(1)
        }
        const [name, value] = pair.split(/:\s*/)
        return {name, value}
      })
  }

  return fse.readFile(colorVarsPath, 'utf8')
    .then(parseVariables)
}

const generator = (handler) => {
  return (context) => {
    console.warn('context:', context)
    delete context._
    return Promise.resolve(
        Object.keys(octicons).map(name => octicons[name])
      )
      .then(icons => {
        console.warn('got %d octicons', icons.length)
        return Object.assign(context, {icons})
      })
      .then(getColors)
      .then(colors => {
        console.warn('got %d colors', colors.length)
        return Object.assign(context, {colors})
      })
      // finally call the handler with the context
      .then(() => handler(context))
      .catch(error => {
        console.error('unable to initialize:', error)
        process.exit(1)
      })
  }
}

const generateFromMatrix = (context, generate, ext) => {
  const {icons, colors, sizes} = context
  return new Promise((resolve, reject) => {
    const results = []
    permutron.object({
      icon: icons,
      color: colors,
      size: sizes,
    },
    (data, next) => {
      generate(data).then(result => {
        results.push(result)
        next()
      })
    },
    (error) => {
      if (error) {
        reject(error)
      } else {
        resolve(results)
      }
    })
  })
}

const writeIcon = (data, {icon, color, size=64}, ext, outdir) => {
  const filename = `${icon.symbol}@${size}.${ext}`
  const outfile = path.join(outdir, color.name, filename)
  const outpath = path.dirname(outfile)
  console.warn(
    'writing %s @%d filled with %s to:',
    icon.symbol, size, color.value, outfile
  )
  return fse.mkdirp(outpath)
    .then(() => fse.writeFile(outfile, data))
    // resolve with the generated path
    .then(() => outfile)
}

const svgize = (icon, color) => {
  const svg = icon.toSVG({fill: color.value})
  return Promise.resolve(svg)
}

const rasterize = buffer => {
  console.warn('rasterizing... (NOT IMPLEMENTED)')
}

const generateSVGs = generator(context => {
  return generateFromMatrix(context, data => {
    const {icon, color} = data
    const {outdir} = context
    return svgize(icon, color)
      .then(svg => writeIcon(svg, data, 'svg', outdir))
  })
})

const generatePNGs = generator(context => {
  return generateSVGs(context)
    .then(svgs => {
      console.warn('rasterizing %d svgs', svgs.length)
      console.warn(svgs.slice(0, 3), '...')
    })
})

require('yargs')
  .usage('$0 <command> [options]')
  .options({
    outdir: {
      alias: 'o',
      describe: 'the output directory',
      global: true,
      default: 'build/images',
    },
    sizes: {
      alias: 's',
      type: 'array',
      describe: 'One or more square sizes in pixels',
      global: true,
      default: [64],
    }
  })
  .command('svg', 'generate colored SVG files', {}, generateSVGs)
  .command('png', 'generate colored PNG files', {}, generatePNGs)
  .demandCommand(1, 'Please provide a command')
  .help()
  .strict(true)
  .argv
